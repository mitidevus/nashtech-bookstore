generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  image         String
  address       String         @default("")
  phone         String         @default("")
  role          UserRole       @default(user)
  refreshToken  String?        @map("refresh_token")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  orders        Order[]
  ratingReviews RatingReview[]

  @@map("users")
}

model Book {
  id                 Int            @id @default(autoincrement())
  slug               String?        @unique
  name               String
  description        String
  image              String
  price              Float
  discountPrice      Float          @default(0) @map("discount_price")
  discountPercentage Int            @default(0) @map("discount_percentage")
  avgStars           Float          @default(0) @map("avg_stars")
  totalReviews       Int            @default(0) @map("total_reviews")
  soldQuantity       Int            @default(0) @map("sold_quantity")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  promotionListId    Int?           @map("promotion_list_id")
  promotionList      PromotionList? @relation(fields: [promotionListId], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_book_promotion_list")
  authors            BookAuthor[]
  categories         BookCategory[]
  ratingReviews      RatingReview[]
  OrderItem          OrderItem[]

  @@map("books")
}

model Author {
  id        Int          @id @default(autoincrement())
  slug      String?      @unique
  name      String
  image     String
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  books     BookAuthor[]

  @@map("authors")
}

model BookAuthor {
  bookId   Int    @map("book_id")
  authorId Int    @map("author_id")
  book     Book   @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_book_author_book")
  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_book_author_author")

  @@id([bookId, authorId])
  @@map("book_author")
}

model Category {
  id        Int            @id @default(autoincrement())
  slug      String?        @unique
  name      String
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  books     BookCategory[]

  @@map("categories")
}

model BookCategory {
  bookId     Int      @map("book_id")
  categoryId Int      @map("category_id")
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_book_category_book")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_book_category_category")

  @@id([bookId, categoryId])
  @@map("book_category")
}

model RatingReview {
  id        Int      @id @default(autoincrement())
  bookId    Int      @map("book_id")
  userId    String   @map("user_id")
  star      Int
  title     String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_rating_review_book")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_rating_review_user")

  @@map("rating_reviews")
}

model PromotionList {
  id        Int      @id @default(autoincrement())
  slug      String?  @unique
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  books     Book[]

  @@map("promotion_lists")
}

model Order {
  id              String      @id @default(uuid())
  userId          String      @map("user_id")
  status          OrderStatus @default(pending)
  totalPrice      Float       @default(0) @map("total_price")
  shippingAddress String      @map("shipping_address")
  phone           String      @map("phone")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_user")
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  orderId       String   @map("order_id")
  bookId        Int      @map("book_id")
  quantity      Int
  price         Float
  discountPrice Float    @map("discount_price")
  totalPrice    Float
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_item_order")
  book          Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_item_book")

  @@id([orderId, bookId])
  @@map("order_items")
}

enum UserRole {
  admin
  user
}

enum OrderStatus {
  pending
  processing
  completed
  cancelled
}
